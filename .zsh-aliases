# -------------------
# üîπ DOTFILES ALIASES
# -------------------

alias dotgit='git --git-dir=$HOME/Repos/dotfiles/.git --work-tree=$HOME/Repos/dotfiles'
alias dotfiles='cd ~/Repos/dotfiles/.scripts/tools'
alias scripts='cd ~/.scripts/tools'

# Replace functions with aliases that directly call scripts
alias dotfiles-sync="$HOME/.scripts/tools/run_dotfiles_sync.sh"
alias dotfiles-upload="$HOME/.scripts/tools/run_dotfiles_upload.sh"
alias dotfiles-download="$HOME/.scripts/tools/run_dotfiles_download.sh"
alias dotfiles-add="$HOME/.scripts/tools/run_dotfiles_add.sh"
alias dotfiles-remove="$HOME/.scripts/tools/run_dotfiles_remove.sh"
alias dotfiles-status="dotgit status"
alias dotfiles-log="dotgit log --oneline --graph --decorate -n 10"
alias dotfiles-reset="dotgit reset --hard && dotgit clean -fd"

alias bootstrap-github="$HOME/.scripts/bootstrap/bootstrap_github.sh"
alias bootstrap-packages="$HOME/.scripts/bootstrap/bootstrap_packages.sh"
alias bootstrap-dev="$HOME/.scripts/bootstrap/bootstrap_dev_environment.sh"

alias git-https-to-ssh='git remote -v | awk "/https:\/\/github.com/ {print \$1, \$2}" | while read remote url; do git remote set-url "$remote" "$(echo "$url" | sed -E "s|https://github.com/|git@github.com:|;s|.git$||").git"; done'

dotfiles-backup() {
    TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
    BACKUP_DIR="$HOME/backups/dotfiles-$TIMESTAMP.tar.gz"

    echo "üíæ Creating backup: $BACKUP_DIR..."
    tar -czf "$BACKUP_DIR" -C "$HOME" $(dotgit ls-files)
    echo "‚úÖ Backup completed!"
}

create-alias() {
    if [[ -z "$1" || -z "$2" ]]; then
        echo "‚ö†Ô∏è Usage: create-alias <alias_name> <command>"
        return 1
    fi

    local alias_name="$1"
    local alias_command="$2"

    # Check if alias already exists
    if alias "$alias_name" &>/dev/null; then
        echo "‚ùå Alias '$alias_name' already exists!"
        return 1
    fi

    # Append the alias to .zshrc
    echo "üîó Creating alias: $alias_name -> '$alias_command'"
    echo "alias $alias_name='$alias_command'" >> "$HOME/.zshrc"

    # Reload shell to apply
    source "$HOME/.zshrc"
    echo "‚úÖ Alias '$alias_name' added successfully!"
}

# -------------------
# üîπ SYSTEM UTILITIES
# -------------------

alias zshrc='nvim ~/.zshrc && source ~/.zshrc'
alias aliases='nvim ~/.zsh-aliases && source ~/.zshrc'
alias update='sudo dnf update && sudo dnf upgrade'
alias install='sudo dnf install'

alias free_space="df -h --total | grep total"  # Show disk space in human-readable format
alias meminfo="free -h"  # Show available RAM
alias processes="ps aux --sort=-%cpu | head -15"  # Show top CPU-consuming processes
alias reboot_now="sudo systemctl reboot"  # Quick reboot
alias shutdown_now="sudo systemctl poweroff"  # Quick shutdown

alias trash='mv --force -t ~/.local/share/Trash '
alias print='echo'
alias edit='nvim'

alias sshpc='ssh andrewgari@192.168.50.2'
alias sshwork='ssh andrewgari@192.168.50.11'

# Bat (better `cat` replacement)
if command -v bat &>/dev/null; then
    alias cat='bat --style=plain'
fi

# Use `duf` for better disk usage overview
if command -v duf &>/dev/null; then
    alias df='duf --only local'
fi

# Use `htop` if installed
if command -v htop &>/dev/null; then
    alias top='htop'
fi

# -------------------
# üîπ PACKAGE MANAGEMENT
# -------------------

alias update-pkg='
  if command -v apt >/dev/null; then
    sudo apt update;
  elif command -v dnf >/dev/null; then
    sudo dnf check-update;
  elif command -v yay >/dev/null; then
    yay -Sy;
  elif command -v pacman >/dev/null; then
    sudo pacman -Sy;
  elif command -v nala >/dev/null; then
    sudo nala fetch;
  else
    echo "No known package manager found.";
  fi
'

alias pkg-upgrade='
  if command -v apt >/dev/null; then
    sudo apt upgrade -y;
  elif command -v dnf >/dev/null; then
    sudo dnf upgrade --refresh -y;
  elif command -v yay >/dev/null; then
    yay -Sua --noconfirm;
  elif command -v pacman >/dev/null; then
    sudo pacman -Su --noconfirm;
  elif command -v nala >/dev/null; then
    sudo nala upgrade -y;
  else
    echo "No known package manager found.";
  fi
'

alias status='systemctl status'
alias start='systemctl start'
alias enable='systemctl enable'
alias disable='systemctl disable'
alias stop='systemctl stop'
alias restart='systemctl daemon-reload'

# -------------------
# üîπ NETWORKING
# -------------------

alias myip="curl ifconfig.me"  # Get public IP address
alias flush_dns="sudo systemd-resolve --flush-caches && sudo systemctl restart systemd-resolved"
alias speedtest="fast"
alias nmap_local="sudo nmap -sP 192.168.50.0/24"
alias restart_network="sudo systemctl restart NetworkManager"

# -------------------
# üîπ FILE & DIRECTORY NAVIGATION
# -------------------

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias docs="cd ~/Documents"
alias dl="cd ~/Downloads"
alias repos="cd ~/Repos"
alias unraid="cd /mnt/unraid"

alias rsync="rsync --one-file-system"
alias giga-rsync="rsync"

# Exa (Better `ls`)
if command -v exa &>/dev/null; then
    alias ls='exa --icons'
    alias ll='exa -l --icons'
    alias la='exa -la --icons'
    alias lt='exa -lT --icons'
    alias lg='exa -l --git --icons'
    alias lsd='exa -D --icons'
fi

# -------------------
# üîπ GIT SHORTCUTS
# -------------------

alias g="git"
alias gs="git status"
alias ga="git add ."
alias gc="git commit -m"
alias gp="git push -u origin"
alias gl="git log --oneline --graph --decorate --all"
alias gd="git diff"
alias gco="git switch"
alias gpull="git pull origin"

# -------------------
# üîπ DOCKER & SYSTEMD
# -------------------

alias docker_restart="sudo systemctl restart docker"
alias docker_cleanup="docker system prune -a -f && docker volume prune -f"

# Podman (Docker Alternative)
if command -v podman &>/dev/null; then
    alias docker="podman"
    alias dps='docker ps'
    alias dpa='docker ps -a'
    alias drm='docker rm $(docker ps -aq)'
    alias dstop='docker stop $(docker ps -q)'
fi

alias list_services="systemctl list-units --type=service --state=running"
alias reload_systemd="sudo systemctl daemon-reexec"

# -------------------
# üîπ MISC SHORTCUTS
# -------------------

alias watch_logs="journalctl -f"
alias top_cpu="ps -eo pid,comm,%cpu --sort=-%cpu | head"
alias top_mem="ps -eo pid,comm,%mem --sort=-%mem | head"

# -------------------
# üîπ FLATPAK & SOFTWARE
# -------------------

alias flatpak_list="flatpak list"
alias flatpak_clean="flatpak uninstall --unused -y && flatpak repair"

# -----------------------------
# Zoxide Smart Navigation
# -----------------------------

if command -v zoxide &>/dev/null; then
    eval "$(zoxide init zsh)"
    alias z='zoxide query --exclude "$(pwd)"'
    alias zi='zoxide query --interactive'
fi

# -----------------------------
# Personal Scripts
# -----------------------------

export SCRIPTS_DIR="$HOME/Repos/dotfiles/.scripts/tools"

alias backup_gnome="$SCRIPTS_DIR/run_backup_gnome_settings.sh"
alias btrfs_backup="$SCRIPTS_DIR/run_btrfs_backup.sh"
alias bulk_rename="$SCRIPTS_DIR/run_bulk_rename.sh"
alias wifi_signal="$SCRIPTS_DIR/run_check_wifi_signal.sh"
alias convert_video="$SCRIPTS_DIR/run_convert_video.sh"
alias diagnostics="$SCRIPTS_DIR/run_diagnostics.sh"
alias dnf_refresh="$SCRIPTS_DIR/run_dnf_refresh.sh"
alias find_large_files="$SCRIPTS_DIR/run_find_large_files.sh"
alias kill_high_cpu="$SCRIPTS_DIR/run_kill_high_cpu.sh"
alias mount_usb="$SCRIPTS_DIR/run_mount_usb.sh"
alias move_flatpaks="$SCRIPTS_DIR/run_move_flatpaks.sh"
alias benchmark="$SCRIPTS_DIR/run_performance_benchmark.sh"
alias record_terminal="$SCRIPTS_DIR/run_record_terminal.sh"
alias screenshot_ocr="$SCRIPTS_DIR/run_screenshot_ocr.sh"
alias network_diag="$SCRIPTS_DIR/run_network_diagnostics.sh"
alias system_diag="$SCRIPTS_DIR/run_system_diagnostics.sh"
alias system_migrate="$SCRIPTS_DIR/run_system_migration.sh"
alias watch_directory="$SCRIPTS_DIR/run_watch_directory.sh"

chmod +x $SCRIPTS_DIR/*.sh

fix_nvim_zsh() {
    echo "üö® Removing Lazy.nvim, zsh-autosuggestions, and zsh-syntax-highlighting..."

    # Remove Lazy.nvim and its related directories
    rm -rf ~/.local/share/nvim/lazy
    rm -rf ~/.local/state/nvim
    rm -rf ~/.cache/nvim
    rm -rf ~/.config/nvim/lazy-lock.json

    # Remove zsh-autosuggestions and zsh-syntax-highlighting
    rm -rf ~/.zsh/zsh-autosuggestions
    rm -rf ~/.zsh/zsh-syntax-highlighting

    # Reset any potential broken zsh settings
    sed -i '/zsh-autosuggestions/d' ~/.zshrc
    sed -i '/zsh-syntax-highlighting/d' ~/.zshrc

    # Reload zsh config
    source ~/.zshrc

    echo "‚úÖ All traces removed!"
    echo ""
    echo "üöÄ Starting reinstallation..."

    # Ensure .zsh directory exists
    mkdir -p ~/.zsh

    # Install Lazy.nvim
    echo "üì• Installing Lazy.nvim..."
    git clone --filter=blob:none --single-branch https://github.com/folke/lazy.nvim ~/.local/share/nvim/lazy/lazy.nvim

    # Install zsh-autosuggestions
    echo "üì• Installing zsh-autosuggestions..."
    git clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions

    # Install zsh-syntax-highlighting
    echo "üì• Installing zsh-syntax-highlighting..."
    git clone https://github.com/zsh-users/zsh-syntax-highlighting ~/.zsh/zsh-syntax-highlighting

    # Add plugins back to .zshrc if missing
    if ! grep -q "source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh" ~/.zshrc; then
        echo 'source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh' >> ~/.zshrc
    fi
    if ! grep -q "source ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ~/.zshrc; then
        echo 'source ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh' >> ~/.zshrc
    fi

    # Reload shell
    echo "üîÑ Reloading Zsh..."
    source ~/.zshrc

    # Run Lazy.nvim update
    echo "üîÑ Running Lazy.nvim update..."
    nvim --headless "+Lazy! sync" +qa

    # Install essential LSPs
    echo "üîß Installing LSPs..."
    nvim --headless -c "MasonInstall lua-language-server pyright tsserver gopls rust-analyzer bash-language-server json-lsp yaml-language-server html-lsp css-lsp" -c "q"

    # Install treesitter parsers
    echo "üå≥ Installing Treesitter parsers..."
    nvim --headless -c "TSInstallSync lua python typescript go rust bash json yaml html css markdown kotlin java" -c "q"

    # Install additional Neovim plugins
    echo "üì¶ Installing popular Neovim plugins..."
    nvim --headless -c "Lazy! sync" -c "q"

    echo "‚úÖ Reinstallation complete! Everything is now fresh and up to date."
}

alias chrome="google-chrome-stable --ozone-platform=wayland"
